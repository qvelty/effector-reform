"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[266],{7095:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>x,contentTitle:()=>c,default:()=>b,frontMatter:()=>u,metadata:()=>f,toc:()=>g});var a=r(4848),t=r(8453),s=r(9084),i=r(5053),l=r(2489),o=r(3721);const d=(0,s.DG)({schema:{a:"string",b:0,c:[],d:{e:"string 2",f:(0,s.mJ)([])}}}),m=(0,l.y$)(null);(0,l.XM)({clock:d.submitted,fn:e=>JSON.stringify(e),target:m});const p=()=>{const{onSubmit:e,fields:n}=(0,i.mN)(d),r=(0,o.e3)(m);return(0,a.jsxs)(a.Fragment,{children:[r&&(0,a.jsxs)("p",{children:["submitted with: ",r]}),(0,a.jsxs)("form",{onSubmit:e,children:[(0,a.jsxs)("div",{children:[(0,a.jsx)("p",{style:{margin:"12px 0 4px 0"},children:"string field"}),(0,a.jsx)("input",{value:n.a.value,onChange:e=>n.a.onChange(e.currentTarget.value)})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("p",{style:{margin:"12px 0 4px 0"},children:"number field"}),(0,a.jsx)("input",{value:n.b.value,inputMode:"numeric",onChange:e=>n.b.onChange(parseInt(e.currentTarget.value))})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("p",{style:{margin:"12px 0 4px 0"},children:"array field"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("div",{style:{display:"flex",flexDirection:"column",gap:8},children:n.c.values.map(((e,r)=>(0,a.jsx)("span",{onClick:()=>n.c.onRemove({index:r}),children:e})))}),(0,a.jsx)("button",{type:"button",onClick:()=>n.c.onPush(Math.random()),children:"add num"})]})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("p",{style:{margin:"12px 0 4px 0"},children:"field in group"}),(0,a.jsx)("input",{value:n.d.e.value,onChange:e=>n.d.e.onChange(e.currentTarget.value)})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("p",{style:{margin:"12px 0 4px 0"},children:"array with subfields"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("div",{style:{display:"flex",flexDirection:"column",gap:8},children:n.d.f.values.map((e=>(0,a.jsx)("input",{value:e.name.value,onChange:n=>e.name.onChange(n.currentTarget.value)})))}),(0,a.jsxs)("p",{style:{margin:"12px 0 4px 0"},children:["friends:"," ",n.d.f.values.map((e=>e.name.value)).join(", ")]}),(0,a.jsx)("button",{type:"button",onClick:()=>n.d.f.onPush({name:""}),children:"add friend"})]}),(0,a.jsx)("button",{type:"submit",children:"submit"})]})]})]})},u={sidebar_position:1,title:"Base form example",id:"base-form",tags:["Learn","Getting started","Base form","Example","Examples"]},c=void 0,f={id:"learn/examples/base-form",title:"Base form example",description:"",source:"@site/docs/learn/examples/base-form.mdx",sourceDirName:"learn/examples",slug:"/learn/examples/base-form",permalink:"/effector-reform/docs/learn/examples/base-form",draft:!1,unlisted:!1,editUrl:"https://github.com/qvelty/effector-reform/tree/main/docs/docs/learn/examples/base-form.mdx",tags:[{label:"Learn",permalink:"/effector-reform/docs/tags/learn"},{label:"Getting started",permalink:"/effector-reform/docs/tags/getting-started"},{label:"Base form",permalink:"/effector-reform/docs/tags/base-form"},{label:"Example",permalink:"/effector-reform/docs/tags/example"},{label:"Examples",permalink:"/effector-reform/docs/tags/examples"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Base form example",id:"base-form",tags:["Learn","Getting started","Base form","Example","Examples"]},sidebar:"learnSidebar",previous:{title:"Core Principles",permalink:"/effector-reform/docs/learn/introduction/core-principles"},next:{title:"Use field out of form",permalink:"/effector-reform/docs/learn/examples/field-out-of-form"}},x={},g=[];function v(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(p,{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { createArrayField, createForm } from '@effector-reform/core';\nimport { useForm } from '@effector-reform/react';\nimport { createStore, sample } from 'effector';\nimport { useUnit } from 'effector-react';\n\nconst form = createForm({\n  schema: {\n    a: 'string',\n    b: 0,\n    c: [] as number[],\n    d: {\n      e: 'string 2',\n      f: createArrayField<{ name: string }>([]),\n    },\n  },\n});\n\nconst $message = createStore<string | null>(null);\n\nsample({\n  clock: form.submitted,\n  fn: (values) => JSON.stringify(values),\n  target: $message,\n});\n\nexport const BaseForm = () => {\n  const { onSubmit, fields } = useForm(form);\n  const message = useUnit($message);\n\n  return (\n    <>\n      {message && <p>submitted with: {message}</p>}\n\n      <form onSubmit={onSubmit}>\n        <div>\n          <p style={{ margin: '12px 0 4px 0' }}>string field</p>\n          <input\n            value={fields.a.value}\n            onChange={(e) => fields.a.onChange(e.currentTarget.value)}\n          />\n        </div>\n\n        <div>\n          <p style={{ margin: '12px 0 4px 0' }}>number field</p>\n          <input\n            value={fields.b.value}\n            inputMode=\"numeric\"\n            onChange={(e) => fields.b.onChange(parseInt(e.currentTarget.value))}\n          />\n        </div>\n\n        <div>\n          <p style={{ margin: '12px 0 4px 0' }}>array field</p>\n          <div>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>\n              {fields.c.values.map((num, index) => (\n                <span onClick={() => fields.c.onRemove({ index })}>{num}</span>\n              ))}\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={() => fields.c.onPush(Math.random())}\n            >\n              add num\n            </button>\n          </div>\n        </div>\n\n        <div>\n          <p style={{ margin: '12px 0 4px 0' }}>field in group</p>\n\n          <input\n            value={fields.d.e.value}\n            onChange={(e) => fields.d.e.onChange(e.currentTarget.value)}\n          />\n        </div>\n\n        <div>\n          <p style={{ margin: '12px 0 4px 0' }}>array with subfields</p>\n          <div>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>\n              {fields.d.f.values.map((group) => (\n                <input\n                  value={group.name.value}\n                  onChange={(e) => group.name.onChange(e.currentTarget.value)}\n                />\n              ))}\n            </div>\n\n            <p style={{ margin: '12px 0 4px 0' }}>\n              friends:{' '}\n              {fields.d.f.values.map((group) => group.name.value).join(', ')}\n            </p>\n\n            <button\n              type=\"button\"\n              onClick={() => fields.d.f.onPush({ name: '' })}\n            >\n              add friend\n            </button>\n          </div>\n\n          <button type=\"submit\">submit</button>\n        </div>\n      </form>\n    </>\n  );\n};\n\n"})})]})}function b(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[975],{2608:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var t=n(4848),d=n(8453);const s={id:"create-form",sidebar_position:4,title:"createForm",tags:["Core","Form"]},l=void 0,i={id:"api/core/create-form",title:"createForm",description:"Creates form",source:"@site/docs/api/core/create-form.md",sourceDirName:"api/core",slug:"/api/core/create-form",permalink:"/effector-reform/docs/api/core/create-form",draft:!1,unlisted:!1,editUrl:"https://github.com/qvelty/effector-reform/tree/main/docs/docs/api/core/create-form.md",tags:[{label:"Core",permalink:"/effector-reform/docs/tags/core"},{label:"Form",permalink:"/effector-reform/docs/tags/form"}],version:"current",sidebarPosition:4,frontMatter:{id:"create-form",sidebar_position:4,title:"createForm",tags:["Core","Form"]},sidebar:"apiSidebar",previous:{title:"createArrayField",permalink:"/effector-reform/docs/api/core/create-array-field"},next:{title:"useField",permalink:"/effector-reform/docs/api/react/use-field"}},a={},c=[{value:"Formulae",id:"formulae",level:3},{value:"Examples",id:"examples",level:3},{value:"API Reference",id:"api-reference",level:3}];function o(e){const r={code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Creates form"}),"\n",(0,t.jsx)(r.h3,{id:"formulae",children:"Formulae"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"interface CreateFormOptions<T extends AnySchema> {\n  schema: T;\n  validation?: SyncValidationFn<T> | AsyncValidationFn<T>;\n  validationStrategies?: ValidationStrategy[];\n  clearOuterErrorsOnSubmit?: boolean;\n}\n\ntype SyncValidationFn<Schema extends AnySchema> = (\n  values: FormValues<UserFormSchema<Schema>>,\n) => ErrorsSchemaPayload | null;\n\ntype AsyncValidationFn<Schema extends AnySchema> = (\n  values: FormValues<UserFormSchema<Schema>>,\n) => Promise<ErrorsSchemaPayload | null>;\n\ntype ErrorsSchemaPayload = Record<string, FieldError>;\ntype ValidationStrategy = 'blur' | 'focus' | 'change' | 'submit';\n\nfunction createForm<T extends AnySchema>(options: CreateFormOptions<T>);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { createArrayField, createField, createForm } from \"@effector-reform/core\";\nimport { sample, createEffect } from \"effector\";\n\nconst form = createForm({\n  schema: {\n    string: createField('John'),\n    number: 0,\n    nullable: null,\n    array: createArrayField<Date>([new Date()]),\n    group: {\n      subField: createField(''),\n    },\n  },\n});\n\nconst logFx = createEffect(console.log);\n\nsample({\n  clock: form.validatedAndSubmitted,\n  target: logFx,\n});\n\nform.fields.nullable.change('hi');\nform.fields.number.change(10);\nform.fields.array.push(new Date());\nform.fields.group.subField.change('Peter');\n\nform.submit(); \n\n/*\n  logFx (form.$values) -> {\n    string: 'John',\n    number: 10,\n    nullable: 'hi',\n    array: [Date, Date],\n    group: { subField: 'Peter' }\n  }\n*/\n"})}),"\n",(0,t.jsx)(r.h3,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"name"}),(0,t.jsx)(r.th,{children:"type"}),(0,t.jsx)(r.th,{children:"description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"fields"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Fields"})}),(0,t.jsx)(r.td,{children:"contains fields of form (you can access only primitive fields api, groups or array field top api"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"$values"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Store<Values>"})}),(0,t.jsx)(r.td,{children:"contains values of fields"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"$errors"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Store<Errors>"})}),(0,t.jsxs)(r.td,{children:["contains error of fields (",(0,t.jsx)(r.em,{children:(0,t.jsx)(r.strong,{children:"Note:"})})," array field errors stored in format ",(0,t.jsx)(r.code,{children:"{ error: null, errors: [] }"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"$isValid"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Store<boolean>"})}),(0,t.jsx)(r.td,{children:"is all fields in form valid"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"$isDirty"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Store<boolean>"})}),(0,t.jsx)(r.td,{children:"is any field of form changed"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"$isValidationPending"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Store<boolean>"})}),(0,t.jsx)(r.td,{children:"is validation pending at the moment"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"setValues"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<Values>"})}),(0,t.jsx)(r.td,{children:"set all values of form (for all fields)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"setPartialValues"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<PartialRecursive<Values>>"})}),(0,t.jsx)(r.td,{children:"set partially values of form (for some fields)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"setErrors"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<ErrorsSchemaPayload>"})}),(0,t.jsx)(r.td,{children:"set outer errors of fields"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"changed"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<Values>"})}),(0,t.jsx)(r.td,{children:"triggered when any field in form value changed"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"errorsChanged"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Event<Errors>"})}),(0,t.jsx)(r.td,{children:"triggered when any field in form error changed"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"validate"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<void>"})}),(0,t.jsx)(r.td,{children:"validate form (calls validationFn from overrides)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"validated"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Event<void>"})}),(0,t.jsx)(r.td,{children:"triggered when form validated"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"validatedAndSubmitted"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Event<void>"})}),(0,t.jsx)(r.td,{children:"triggered when form submitted and validated"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"submit"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<void>"})}),(0,t.jsx)(r.td,{children:"submit form"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"submitted"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Event<Values>"})}),(0,t.jsx)(r.td,{children:"triggered when form submitted (be careful: form submitted be called even if validate of form is failed"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"reset"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<void>"})}),(0,t.jsx)(r.td,{children:"reset form values"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"clear"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EventCallable<void>"})}),(0,t.jsx)(r.td,{children:"clear form values"})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>i});var t=n(6540);const d={},s=t.createContext(d);function l(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);